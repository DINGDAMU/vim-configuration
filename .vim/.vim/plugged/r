Binary file ./vim-javacomplete2/libs/javavi_log4j-core.jar matches
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_autoimport_bind', '<C-c>ra')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_goto_definition_bind', '<C-c>g')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_show_doc_bind', '<C-c>d')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_find_it_bind', '<C-c>f')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_organize_imports_bind', '<C-c>ro')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_rename_bind', '<C-c>rr')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_rename_module_bind', '<C-c>r1r')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_module_to_package_bind', '<C-c>r1p')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_extract_method_bind', '<C-c>rm')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_extract_variable_bind', '<C-c>rl')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_inline_bind', '<C-c>ri')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_move_bind', '<C-c>rv')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_generate_function_bind', '<C-c>rnf')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_generate_class_bind', '<C-c>rnc')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_generate_package_bind', '<C-c>rnp')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_change_signature_bind', '<C-c>rs')
./python-mode/plugin/pymode.vim:call pymode#default('g:pymode_rope_use_function_bind', '<C-c>ru')
./python-mode/doc/pymode.txt:- Go to definition (``<C-c>g`` for `:RopeGotoDefinition`)
./python-mode/doc/pymode.txt:    let g:pymode_rope_show_doc_bind = '<C-c>d'
./python-mode/doc/pymode.txt:    let g:pymode_rope_goto_definition_bind = '<C-c>g'
./python-mode/doc/pymode.txt:    let g:pymode_rope_rename_bind = '<C-c>rr'
./python-mode/doc/pymode.txt:    let g:pymode_rope_rename_module_bind = '<C-c>r1r'
./python-mode/doc/pymode.txt:    let g:pymode_rope_organize_imports_bind = '<C-c>ro'
./python-mode/doc/pymode.txt:    let g:pymode_rope_autoimport_bind = '<C-c>ra'
./python-mode/doc/pymode.txt:    let g:pymode_rope_module_to_package_bind = '<C-c>r1p'
./python-mode/doc/pymode.txt:    let g:pymode_rope_extract_method_bind = '<C-c>rm'
./python-mode/doc/pymode.txt:    let g:pymode_rope_extract_variable_bind = '<C-c>rl'
./python-mode/doc/pymode.txt:    let g:pymode_rope_use_function_bind = '<C-c>ru'
./python-mode/doc/pymode.txt:    let g:pymode_rope_move_bind = '<C-c>rv'
./python-mode/doc/pymode.txt:    let g:pymode_rope_change_signature_bind = '<C-c>rs'
./python-mode/README.rst:- Go to definition (``<C-c>g`` for `:RopeGotoDefinition`)
./python-mode/Changelog.rst:* "<C-c>r a" for RopeAutoImport
./ale/doc/ale.txt:    inoremap <C-c> <Esc>
./c-support/plugin/c.vim:	" Is the C-comment complete ? Get length.
./c-support/c-support/doc/ChangeLog:- Toggle non-C-comments.
./c-support/c-support/doc/ChangeLog:  turns a marked region in one multiline C-comment.
./c-support/c-support/doc/ChangeLog:+ The menu entry "Comments.comment->code"  turns marked multiline C-comment 
./c-support/doc/csupport.txt:The first 2 lines are only a part of a C-comment and remain unchanged.
./c-support/doc/csupport.txt:A C-comment can start with /* , /** or /*! .
./c.vim/plugin/c.vim:	" Is the C-comment complete ? Get length.
./c.vim/doc/ChangeLog:  turns a marked region in one multiline C-comment.
./c.vim/doc/ChangeLog:+ The menu entry "Comments.comment->code"  turns marked multiline C-comment 
./c.vim/doc/csupport.txt:The first 2 lines are only a part of a C-comment and remain unchanged.
./c.vim/doc/csupport.txt:A C-comment can start with /* , /** or /*! .
./nerdcommenter/doc/NERD_commenter.txt:NOTE: prior to version 2.1.17 this was mapped to <C-c>. To restore this
./nerdcommenter/doc/NERD_commenter.txt:    imap <C-c> <plug>NERDCommenterInsert
./vim-easymotion/doc/easymotion.txt:    <ESC> or <C-c>          | Cancel
./vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim:\	|| a:cmdline.is_input("\<C-c>")
./vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim:	" Workaround for the :set cedit=<C-c>
./vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim:	if &cedit != "<C-c>"
./vim-easymotion/autoload/vital/_easymotion/Over/Input.vim:			let char = 3 " <C-c>
./vim-easymotion/autoload/EasyMotion.vim:            let char = 3 " <C-c>
./vim-easymotion/autoload/EasyMotion.vim:            " Escape or <C-c> key pressed
